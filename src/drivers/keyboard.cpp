#include <stdint.h>
#include <cstring>
#include <stdbool.h>
#include <iostream>
#include <string>
#include <sstream>

#include "../../include/kernel/globals.h"
#include "../../include/kernel/memory.h"
#include "../../config/memory_map.h"

#include "display.cpp"

int bufferHead;

bool shiftPressed;
bool ctrlPressed;
bool altPressed;
bool extendPressed;

bool capsLock;

unsigned char regularMap[256] = {0x2E, 0xA9, 0x2E, 0xA5, 0xA3, 0xA1, 0xA2, 0xAC, 0x2E, 0xAA, 0xA8, 0xA6, 0xA4, 0x09, 0x60, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x71, 0x31, 0x2E, 0x2E, 0x2E, 0x7A, 0x73, 0x61, 0x77, 0x32, 0x2E, 0x2E, 0x63, 0x78, 0x64, 0x65, 0x34, 0x33, 0x2E, 0x2E, 0x20, 0x76, 0x66, 0x74, 0x72, 0x35, 0x2E, 0x2E, 0x6E, 0x62, 0x68, 0x67, 0x79, 0x36, 0x2E, 0x2E, 0x2E, 0x6D, 0x6A, 0x75, 0x37, 0x38, 0x2E, 0x2E, 0x2C, 0x6B, 0x69, 0x6F, 0x30, 0x39, 0x2E, 0x2E, 0x2E, 0x2F, 0x6C, 0x3B, 0x70, 0x2D, 0x2E, 0x2E, 0x2E, 0x27, 0x2E, 0x5B, 0x3D, 0x2E, 0x2E, 0xAD, 0x2E, 0x0D, 0x5D, 0x2E, 0x5C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x08, 0x2E, 0x2E, 0x95, 0x2E, 0x93, 0x94, 0x2E, 0x2E, 0x2E, 0x98, 0x7F, 0x92, 0x2E, 0x91, 0x90, 0x1B, 0xAF, 0xAB, 0x2E, 0x97, 0x2E, 0x2E, 0x96, 0xAE, 0x2E, 0x2E, 0x2E, 0x2E, 0xA7, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0xFA, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E};

unsigned char shiftMap[256] = {0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x09, 0x7E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x51, 0x21, 0x2E, 0x2E, 0x2E, 0x5A, 0x53, 0x41, 0x57, 0x40, 0x2E, 0x2E, 0x43, 0x58, 0x44, 0x45, 0x24, 0x23, 0x2E, 0x2E, 0x20, 0x56, 0x46, 0x54, 0x52, 0x25, 0x2E, 0x2E, 0x4E, 0x42, 0x48, 0x47, 0x59, 0x5E, 0x2E, 0x2E, 0x2E, 0x4D, 0x4A, 0x55, 0x26, 0x2A, 0x2E, 0x2E, 0x3C, 0x4B, 0x49, 0x4F, 0x29, 0x28, 0x2E, 0x2E, 0x3E, 0x3F, 0x4C, 0x3A, 0x50, 0x5F, 0x2E, 0x2E, 0x2E, 0x22, 0x2E, 0x7B, 0x2B, 0x2E, 0x2E, 0x2E, 0x2E, 0x0D, 0x7D, 0x2E, 0x7C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x08, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x7F, 0x2E, 0x2E, 0x2E, 0x2E, 0x1B, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E};

unsigned char ctrlMap[256] = {0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x09, 0x7E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x11, 0x21, 0x2E, 0x2E, 0x2E, 0x1A, 0x13, 0x01, 0x17, 0x40, 0x2E, 0x2E, 0x03, 0x18, 0x04, 0x05, 0x24, 0x23, 0x2E, 0x2E, 0x20, 0x16, 0x06, 0x14, 0x12, 0x25, 0x2E, 0x2E, 0x0E, 0x02, 0x08, 0x07, 0x19, 0x5E, 0x2E, 0x2E, 0x2E, 0x0D, 0x0A, 0x15, 0x26, 0x2A, 0x2E, 0x2E, 0x3C, 0x0B, 0x09, 0x0F, 0x29, 0x28, 0x2E, 0x2E, 0x3E, 0x3F, 0x0C, 0x3A, 0x10, 0x5F, 0x2E, 0x2E, 0x2E, 0x22, 0x2E, 0x7B, 0x2B, 0x2E, 0x2E, 0x2E, 0x2E, 0x0D, 0x7D, 0x2E, 0x7C, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x08, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x7F, 0x2E, 0x2E, 0x2E, 0x2E, 0x1B, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E};

unsigned char extendMap[256] = {0x2E, 0x2E, 0x2E, 0x2E, 0xA3, 0xA1, 0xA2, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x95, 0x2E, 0x93, 0x94, 0x2E, 0x2E, 0x2E, 0x98, 0x99, 0x92, 0x2E, 0x91, 0x90, 0x2E, 0x2E, 0x2E, 0x2E, 0x97, 0x2E, 0x2E, 0x96, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E};

int keyboardInit(){
    bufferHead = 0;

    shiftPressed = false;
    ctrlPressed = false;
    altPressed = false;
    extendPressed = false;

    capsLock = false;

    //TODO: Interrupt Handlers setting up
    return 0;
}


void addToBuffer(unsigned char ascii) { 
    mwrite(ascii, KEYBOARD_BUFFER_START + bufferHead);
    bufferHead = (bufferHead + 1) % 32;
}

void clearBuffer(){
    bufferHead = 0;
}

//TODO: Can we call by reference?
void getBuffer(char* out) {
    char temp;
    int j = 0;
    for (int i = KEYBOARD_BUFFER_START; i < KEYBOARD_BUFFER_END; i++) {
        temp = mread_keyboard_char(i);
        out[j] = temp;
        j++;
    }
    clearBuffer();
    return;
}

int handleKeyPress(unsigned char scanCode) {
    unsigned char ascii = 0;  // Variable to store the ASCII value

    // Update the state of special keys (Shift, Ctrl, Alt, Extend)
    if (scanCode == 0x2A || scanCode == 0x36) {  // Shift pressed
        shiftPressed = true;
        return 0;
    } else if (scanCode == 0xAA || scanCode == 0xB6) {  // Shift released
        shiftPressed = false;
        return 0;
    } else if (scanCode == 0x1D) {  // Ctrl pressed
        ctrlPressed = true;
        return 0;
    } else if (scanCode == 0x9D) {  // Ctrl released
        ctrlPressed = false;
        return 0;
    } else if (scanCode == 0x38) {  // Alt pressed
        altPressed = true;
        return 0;
    } else if (scanCode == 0xB8) {  // Alt released
        altPressed = false;
        return 0;
    } else if (scanCode == 0xE0) {  // Extend key pressed
        extendPressed = true;
        return 0;
    }

    // Choose the appropriate ASCII map based on the modifier keys
    if (extendPressed) {
        ascii = extendMap[scanCode];  // Extended key map
        extendPressed = false;  // Reset extend state after processing
    } else if (ctrlPressed) {
        ascii = ctrlMap[scanCode];    // Ctrl key map
    } else if (shiftPressed) {
        ascii = shiftMap[scanCode];   // Shift key map
    } else {
        ascii = regularMap[scanCode]; // Regular key map
    }

    // Process the ASCII value (write to keyboard buffer)
    addToBuffer(ascii);
    return 1;
}

void save_memory(char* filename, int len)
{
    FILE* file = fopen(filename, "w");
    for (int i = 0; i < MEMORY_SIZE; i++)
    {
        char temp[9];

        // Initialize the temp array to 0.
        for (int j = 0; j < 8; j++)
        {
            temp[j] = 0;
        }

        for (int j = 0; j < 8; j++)
        {
            if ((memory[i] >> j) & 1)
            {
                temp[7 - j] = '1';
            }
            else
            {
                temp[7 - j] = '0';
            }
        }

        fwrite(temp, sizeof(char), strlen(temp), file);
        
        char* newline = "\n";
        fwrite(newline, sizeof(char), strlen(newline), file);
    }

    fclose(file);
}

int main(){
    minit();
    keyboardInit();
    /*
    Loop that keeps taking in characters and writes to buffers until escape q is hit.
    */
   while(1){
        minit();
        std::string buffer;
        std::getline(std::cin, buffer);
        for(int i = 0; i < buffer.length(); i++) {    
            char temp2 = buffer[i];
            addToBuffer(temp2);
            char temp[32];
            getBuffer(temp);
            write_char(temp[0]);
        }
        mclose();
    }
    printf("Program ended.\n");
    return 0;
}


